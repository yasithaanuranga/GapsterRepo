@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using Chinook.Repository

<PageTitle>Index</PageTitle>

<h1>Artists</h1>




<div class="bs-example ">
    <div class="container">
        <div class="row">
            <div class="col-md-12 bg-light text-right">
                <InputText class="form-control-sm " id="name" @bind-Value="SearchText" />
                <button class="bi bi-search btn btn-primary btn-sm" @onclick="(()=>HandleSearch())">Search</button>
            </div>
        </div>
    </div>
</div>


    @if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    private string? SearchText;
    private EditContext? editContext;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IArtistRepo artistRepo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        Artists = (await artistRepo.ListAll()).ToList();
    }



    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }
    private async void HandleSearch()
    {
        if (String.IsNullOrEmpty(SearchText))
            Artists = (await artistRepo.ListAll()).ToList();
        else
            Artists = (await artistRepo.SearchByName(SearchText)).ToList();
        // Process the form
    }
}
