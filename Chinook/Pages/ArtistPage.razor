@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Repository;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject IJSRuntime JsRuntime;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] private IAlbumRepo _album { get; set; }
    [Inject] private IArtistRepo _artist { get; set; }
    [Inject] private ITrackRepo _tracktRepo { get; set; }
    [Inject] private IPlayListRepo _playListRepo { get; set; }
    [Inject] Chinook.Repository.IUserPlaylistRepo userPlaylistRepo { get; set; }


    private Modal PlaylistDialog { get; set; }
    private Artist? Artist;
    private List<Chinook.ClientModels.PlaylistTrack> Tracks;
    private Chinook.ClientModels.PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private long SelectedPlaylistId;
    private string? CreatePlayLName;

    private List<Chinook.Models.Playlist> Playlists;
    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();


        Artist = await _artist.Get(ArtistId);

        Tracks = (await _tracktRepo.ListAllForArtis(ArtistId)).AsEnumerable().Select(t => new Chinook.ClientModels.PlaylistTrack()
            {
                AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                TrackId = t.TrackId,
                TrackName = t.Name,
                IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
            })
            .ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);


        var t = await _tracktRepo.Get(trackId);
        var p = await _playListRepo.GetByName("My favorite tracks");
        t.Playlists.Add(p);
        p.Tracks.Add(t);

        _playListRepo.UpdateAsync(p);


    }

    private async void UnfavoriteTrack(long trackId)
    {
        var payList = await _playListRepo.GetByName(Common.CommonVariables.MyFavoriteTracks);
        var pl = await _playListRepo.GetWithTrack(payList.PlaylistId);
        var t = pl.Tracks.Where(g => g.TrackId == trackId).FirstOrDefault();

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Would you like to delete Track {t.Name}");
        if (true)
        {
            pl.Tracks.Remove(t);
            _playListRepo.UpdateAsync(pl);
            InfoMessage = $"Track {t.Name} Deleted from Playlist {pl.Name}";
        }

        _playListRepo.UpdateAsync(payList);

    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        Playlists = (await _playListRepo.ListAllForUserId(await GetUserId())).ToList();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {SelectedPlaylistId}.";

        if (String.IsNullOrEmpty(CreatePlayLName))
        {


            var payList = await _playListRepo.GetWithTrack(SelectedPlaylistId);
            var track = Tracks.Where(t => t.TrackName == SelectedTrack.TrackName).FirstOrDefault();
            var t = await _tracktRepo.Get(track.TrackId);
            payList.Tracks.Add(t);

            t.Playlists.Add(payList);

            _playListRepo.UpdateAsync(payList);

        }
        else
        {
            var lastObj = (await _playListRepo.ListAll()).AsEnumerable().OrderByDescending(i => i.PlaylistId).FirstOrDefault();
            long lastId = lastObj != null ? lastObj.PlaylistId : 1;

            Chinook.Models.Playlist pl = new Chinook.Models.Playlist()
                {
                    PlaylistId = ++lastId,
                    Name = CreatePlayLName,
                    Tracks = new List<Track>()
                };

            _playListRepo.Create(pl);


            userPlaylistRepo.Create(new UserPlaylist
                {
                    PlaylistId = pl.PlaylistId,
                    UserId = await GetUserId()
                });



        }

        PlaylistDialog.Close();


    }
    /// <summary>
    /// Close the Message
    /// </summary>
    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <InputSelect class="form-control" id="ExistingPlaylist" @bind-Value="SelectedPlaylistId">
                @if (Playlists != null)
                {
                    foreach (var x in Playlists)
                    {
                        <option value="@x.PlaylistId">@x.Name</option>
                    }
                }

            </InputSelect>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind-value="CreatePlayLName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
<a href="c:\Users\Yasitha Anuranga\Desktop\Gapster\Gapster New\Gapster Git\GapsterRepo\Chinook\Pages\PlaylistPage.cs">c:\Users\Yasitha Anuranga\Desktop\Gapster\Gapster New\Gapster Git\GapsterRepo\Chinook\Pages\PlaylistPage.cs</a>